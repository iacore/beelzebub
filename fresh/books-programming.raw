#lang racket

(define books-programming '(

("Advanced Linux Programming"
"Mark L. Mitchell"
"340/340"
"Linux & Unix system internals")

("Algorithms + Data Structures = Programs"
"Niklaus Wirth"
"366/366"
())

("Bluetooth Low Energy"
"Robin Heydon"
"368/368"
"Blueooth, Wireless communication")

("Bluetooth 1.1"
"Jennifer Bray, Charles F. Sturman"
"624/624"
"Bluetooth, Wireless communication")

("Code Complete"
"Steve McConnell"
"950/950"
"Software Engineering")

("Effective C++"
"Scott Meyers"
"320/320"
"C++")

("Expert C Programming"
"Peter van der Linden"
"290/290"
"C")

("Extreme Programming Explained"
"Kent Beck, Cynthia Andres"
"224/224"
"Software Engineering, Agile Methodology")

("Linkers and Loaders"
"John R. Levine"
"256/256"
())

("Modern Perl"
"Chromatic"
"276/276"
"Perl")

("Modern C++ Design"
"Andrei Alexandrescu"
"352/352"
"C++, Template Metaprogramming, Design Patterns")

("More Effective C++"
"Scott Meyers"
"337/337"
"C++")

("Linux System Programming"
"Robert Love"
"400/400"
"Linux & Unix system internals")

("OCaml from the Very Beginning"
"John Whitington"
"204/204"
"OCaml, Functional Programming")

("PeopleWare"
"Tom DeMarco, Timothy Lister"
"264/264"
())

("Practical Clojure"
"Luke VanderHart, Stuart Sierra"
"228/228"
"Clojure, Lisp, Functional Programming")

("Practical OCaml"
"Joshua B. Smith"
"260/488"
"How not to write a book")

("Practical Perforce"
"Laura Wingerd"
"362/362"
"Perforce, SCM strategies")

("Practical Programming in Tcl"
"Welch"
"960/960"
"TCL, Ancient history")

("Practical Vim"
"Drew Neil"
"300/300"
"Vim")

("Programming Embedded Systems in C and C++"
"Michael Barr"
"200/200"
())

("Programming from the Ground Up"
"Jonathan Bartlett"
"326/326"
"x86 assembly")

("Programming Pearls"
"Jon Bentley"
"256/256"
())

("Realm of Racket"
"Felleisen, Barski, Horn"
"312/312"
"Functional programming, Scheme, Racket")

("Rust by Example"
"Various"
"112/112"
"Rust")

("Secure Coding"
"Mark G"
"224/224"
())

("Sketchy LISP"
"Nils M Holm"
"164/164"
"Functional programming, Scheme")

("Soft Skills The software developer's life manual"
"John Z. Sonmez"
"506/506"
())

("Software Exorcism: A Handbook for Debugging and Optimizing Legacy Code"
"Bill Blunden"
"380/380"
())

("Test Driven Development for Embedded C"
"James W. Grenning"
"326/326"
"TDD, Unity, CppUTest, Refactoring, Design, Legacy Code, C")

("The Art of Unix Programming"
"Eric S. Raymond"
"560/560"
())

("The C++ Programming Language"
"Bjarne Stroustrup"
"1025/1025"
"C++, Object Oriented architecture and design")

("The Career Programmer"
"Christopher Duncan"
"300/300"
())

("The Definitive Guide to the Xen Hypervisor"
"David Chisnall"
"320/320"
"Xen, Operating systems, Computer Architecture")

("The Inmates Are Running the Asylum"
"Alan Cooper"
"288/288"
())

("The Joy of Clojure"
"Chris Houser, Michael Fogus"
"520/520"
"Clojure, Lisp, Functional programming, Logic programming")

("The Little Schemer"
"Friedman, Felleisen, Biddy"
"216/216"
"Functional programming, Scheme")

("The Mythical Man-month"
"Fred Brooks"
"336/336"
"Software Engineering")

("The Object Constraint Language: Precise Modeling with UML"
"Jos Warmer, Anneke G. Kleppe"
"144/144"
"OCL, UML, Design By Contract, Object Oriented Design")

("The Passionate Programmer"
"Chad Fowler"
"232/232"
"Software Engineering")

("The Pragmatic Programmer"
"Andrew Hunt"
"352/352"
"Software engineering")

("The Rust Programming Language"
"Various"
"225/225"
"Rust")

("The Theory of Computer Science"
"J.M. Brady"
"250/250"
())

("Tmux: Productive Mouse-Free Development"
"Brian P. Hogan"
"88/88"
"tmux")

("Unit Test Frameworks"
"Paul Hamill"
"292/292"
"Unit Testing, Test Driven Development, xUnit")

("Why's (Poignant) Guide to Ruby"
"Why"
"176/176"
"Ruby")

("Writing Solid Code"
"Steve Maguire"
"256/256"
"C, robust programming")

("Raspberry Pi Hacks"
"Ruth Suehle, Tom Callaway"
"394/394"
())

("Refactoring: Improving the Design of Existing Code"
"Martin Fowler, Kent Beck"
"464/464"
())

))
(provide books-programming)
